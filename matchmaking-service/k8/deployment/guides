
# start minikube
minikube start --driver=docker

helm init
# install helm charts
helm install kafka -f ./deployment/kafka-values.yaml bitnami/kafka  
helm install rabbitmq bitnami/rabbitmq -f deployment/rabbitmq-values.yaml 
helm install zookeeper -f ./deployment/zookeeper-values.yaml bitnami/zookeeper
kubectl get secret kafka-user-passwords --namespace default -o jsonpath='{.data.client-passwords}'
echo <password> | base64 --decode

# set producer/consumer properties
kubectl create secret generic kafka-consumer-config --from-file=consumer.properties
kubectl create secret generic kafka-producer-config --from-file=producer.properties
kubectl create secret generic credential --from-file=plain-users.json=./k8/deployment/producer.properties  --namespace=default
 
helm install kafka -f ./deployment/kafka-values.yaml bitnami/kafka  --set KAFKA_CLIENT_PASSWORD='LGo0FRGvnD'
NAME: kafka
LAST DEPLOYED: Sun Nov  5 11:40:14 2023
NAMESPACE: default
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
CHART NAME: kafka
CHART VERSION: 26.2.0
APP VERSION: 3.6.0

** Please be patient while the chart is being deployed **

Kafka can be accessed by consumers via port 9092 on the following DNS name from within your cluster:

    kafka.default.svc.cluster.local

Each Kafka broker can be accessed by producers via port 9092 on the following DNS name(s) from within your cluster:

    kafka-controller-0.kafka-controller-headless.default.svc.cluster.local:9092
    kafka-controller-1.kafka-controller-headless.default.svc.cluster.local:9092
    kafka-controller-2.kafka-controller-headless.default.svc.cluster.local:9092

The CLIENT listener for Kafka client connections from within your cluster have been configured with the following security settings:        
    - SASL authentication

To connect a client to your Kafka, you need to create the 'client.properties' configuration files with the content below:

security.protocol=SASL_PLAINTEXT
sasl.mechanism=SCRAM-SHA-256
sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required \
    username="user1" \
    password="$(kubectl get secret kafka-user-passwords --namespace default -o jsonpath='{.data.client-passwords}' | base64 -d | cut -d , -f 1)";

[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("cHNCejNNSmxyTA=="))       
To create a pod that you can use as a Kafka client run the following commands:

    kubectl run kafka-client --restart='Never' --image docker.io/bitnami/kafka:3.6.0-debian-11-r0 --namespace default --command -- sleep infinity
    kubectl cp --namespace default /path/to/client.properties kafka-client:/tmp/client.properties
    kubectl exec --tty -i kafka-client --namespace default -- bash

    PRODUCER:
        kafka-console-producer.sh \
            --producer.config /tmp/client.properties \
            --broker-list kafka-controller-0.kafka-controller-headless.default.svc.cluster.local:9092,kafka-controller-1.kafka-controller-headless.default.svc.cluster.local:9092,kafka-controller-2.kafka-controller-headless.default.svc.cluster.local:9092 \
            --topic test

    CONSUMER:
        kafka-console-consumer.sh \
            --consumer.config /tmp/client.properties \
            --bootstrap-server kafka.default.svc.cluster.local:9092 \
            --topic test \
            --from-beginning